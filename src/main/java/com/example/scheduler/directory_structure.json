{
    "__files__": {
        "codes.py": null,
        "directory_structure.json": null,
        "SchedulerApplication.java": "package com.example.scheduler;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\n@SpringBootApplication\n@EnableScheduling\npublic class SchedulerApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SchedulerApplication.class, args);\n\t}\n\n}\n"
    },
    "config": {
        "__files__": {
            "DefaultGameInitializer.java": "package com.example.scheduler.config;\n\nimport com.example.scheduler.domain.DefaultGame;\nimport com.example.scheduler.repository.DefaultGameRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.boot.ApplicationArguments;\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.stereotype.Component;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\n@Component\n@RequiredArgsConstructor\npublic class DefaultGameInitializer implements ApplicationRunner {\n\n    private final DefaultGameRepository defaultGameRepository;\n\n    @Override\n    public void run(ApplicationArguments args) throws Exception {\n        Resource resource = new ClassPathResource(\"default_games.txt\");\n        try (BufferedReader reader = new BufferedReader(\n                new InputStreamReader(resource.getInputStream(), \"UTF-8\"))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String name = line.trim();\n                if (name.isEmpty()) continue;\n                // 이미 존재하지 않으면 삽입\n                defaultGameRepository.findByName(name)\n                        .orElseGet(() -> defaultGameRepository.save(\n                                DefaultGame.builder()\n                                        .name(name)\n                                        .build()\n                        ));\n            }\n        }\n    }\n}\n"
        }
    },
    "controller": {
        "__files__": {
            "AuthController.java": "package com.example.scheduler.controller;\n\nimport com.example.scheduler.domain.User;\nimport com.example.scheduler.dto.AuthDto;\nimport com.example.scheduler.repository.UserRepository;\nimport com.example.scheduler.service.AuthService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/api/auth\")\n@RequiredArgsConstructor\npublic class AuthController {\n\n    private final AuthService authService;\n    private final UserRepository userRepository;  // ← UserRepository 주입\n\n    /* ---------- 회원가입 ---------- */\n    @PostMapping(\"/signup\")\n    public ResponseEntity<AuthDto.SignupResponse> signup(@RequestBody AuthDto.SignupRequest req) {\n        authService.signup(req);\n        return ResponseEntity.ok(new AuthDto.SignupResponse(\"회원가입이 완료되었습니다\"));\n    }\n\n    /* ---------- 로그인 ---------- */\n    @PostMapping(\"/login\")\n    public ResponseEntity<AuthDto.LoginResponse> login(@RequestBody AuthDto.LoginRequest req) {\n        try {\n            // 1) 토큰 발급\n            String token = authService.login(req);\n\n            // 2) 유저 엔티티 조회\n            User user = userRepository.findByUsername(req.getUsername())\n                    .orElseThrow(() -> new RuntimeException(\"User not found\"));\n\n            // 3) 응답 DTO에 토큰, 아이디, 닉네임, 메시지 담아서 반환\n            AuthDto.LoginResponse resp = new AuthDto.LoginResponse(\n                    token,\n                    \"로그인 성공\",       // message\n                    user.getId(),        // userId\n                    user.getNickname()   // nickname\n            );\n            return ResponseEntity.ok(resp);\n\n        } catch (AuthenticationException ex) {\n            return ResponseEntity.status(401)\n                    .body(new AuthDto.LoginResponse(null, null, null, \"아이디 또는 비밀번호가 올바르지 않습니다\"));\n        }\n    }\n\n    /* ---------- 로그아웃 ---------- */\n    @PostMapping(\"/logout\")\n    public ResponseEntity<?> logout(@RequestHeader(\"Authorization\") String authHeader) {\n        authService.logout(authHeader);\n        return ResponseEntity.ok(Map.of(\"message\", \"로그아웃되었습니다\"));\n    }\n}\n",
            "GameController.java": "// controller/GameController.java\npackage com.example.scheduler.controller;\n\nimport com.example.scheduler.dto.GameDto;\nimport com.example.scheduler.service.GameService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api\")\n@RequiredArgsConstructor\npublic class GameController {\n\n    private final GameService gameService;\n\n    /* ---------- 기본 / 커스텀 게임 조회 ---------- */\n\n    @GetMapping(\"/games/default\")\n    public ResponseEntity<GameDto.DefaultGameListResponse> getDefaultGames() {\n        List<GameDto.DefaultGameResponse> list = gameService.listAllDefault();\n        return ResponseEntity.ok(new GameDto.DefaultGameListResponse(list));\n    }\n\n    @GetMapping(\"/servers/{serverId}/custom-games\")\n    public ResponseEntity<GameDto.CustomGameListResponse> getCustomGames(@PathVariable Long serverId) {\n        List<GameDto.CustomGameResponse> list = gameService.listCustomByServer(serverId);\n        return ResponseEntity.ok(new GameDto.CustomGameListResponse(list));\n    }\n\n    /* ---------- 커스텀 게임 추가 / 삭제 ---------- */\n\n    @PostMapping(\"/servers/{serverId}/custom-games\")\n    public ResponseEntity<GameDto.CustomGameResponse> addCustomGame(\n            @PathVariable Long serverId,\n            @RequestBody GameDto.CustomGameRequest req) {\n        return ResponseEntity.ok(gameService.addCustomGame(serverId, req));\n    }\n\n    @DeleteMapping(\"/servers/{serverId}/custom-games/{gameId}\")   // ⭐ 커스텀 게임 삭제\n    public ResponseEntity<Void> deleteCustomGame(\n            @PathVariable Long serverId,\n            @PathVariable Long gameId) {\n        gameService.deleteCustomGame(serverId, gameId);\n        return ResponseEntity.noContent().build();\n    }\n    @GetMapping(\"/servers/{serverId}/custom-games/{gameId}/scheduled-users\")\n    public ResponseEntity<GameDto.ScheduledUserListResponse> getScheduledUsers(\n            @PathVariable Long serverId,\n            @PathVariable Long gameId\n    ) {\n        return ResponseEntity.ok(gameService.listScheduledUsers(serverId, gameId));\n    }\n\n}\n",
            "ServerController.java": "package com.example.scheduler.controller;\n\nimport com.example.scheduler.dto.ServerDto;\nimport com.example.scheduler.service.ServerService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/servers\")\n@RequiredArgsConstructor\npublic class ServerController {\n\n    private final ServerService serverService;\n\n    @GetMapping(\"/mine\")\n    public ResponseEntity<List<ServerDto.Response>> listMine() {\n        return ResponseEntity.ok(serverService.listMine());\n    }\n\n    @GetMapping(\"/search\")\n    public ResponseEntity<List<ServerDto.Response>> search(\n            @RequestParam(required = false) String q,\n            @RequestParam(defaultValue = \"0\") int page,\n            @RequestParam(defaultValue = \"10\") int size\n    ) {\n        return ResponseEntity.ok(serverService.search(q, page, size));\n    }\n\n    @PostMapping\n    public ResponseEntity<ServerDto.Response> create(@RequestBody ServerDto.CreateRequest req) {\n        return ResponseEntity.ok(serverService.create(req));\n    }\n\n    @PostMapping(\"/{id}/join\")\n    public ResponseEntity<ServerDto.Response> join(@PathVariable Long id) {\n        return ResponseEntity.ok(serverService.join(id));\n    }\n\n    @PostMapping(\"/join\")\n    public ResponseEntity<ServerDto.Response> joinByCode(@RequestParam String code) {\n        return ResponseEntity.ok(serverService.joinByCode(code));\n    }\n\n    @PutMapping(\"/{id}/reset-time\")\n    public ResponseEntity<ServerDto.Response> updateResetTime(\n            @PathVariable Long id,\n            @RequestBody ServerDto.UpdateResetTimeRequest req) {\n        return ResponseEntity.ok(serverService.updateResetTime(id, req));\n    }\n\n    @PutMapping(\"/{id}/name\")\n    public ResponseEntity<ServerDto.Response> rename(\n            @PathVariable Long id,\n            @RequestBody ServerDto.UpdateNameRequest req) {\n        return ResponseEntity.ok(serverService.rename(id, req));\n    }\n\n    @PostMapping(\"/{id}/kick\")\n    public ResponseEntity<ServerDto.Response> kick(\n            @PathVariable Long id,\n            @RequestBody ServerDto.KickRequest req) {\n        return ResponseEntity.ok(serverService.kick(id, req));\n    }\n\n    @PostMapping(\"/{id}/admins\")\n    public ResponseEntity<ServerDto.Response> updateAdmin(\n            @PathVariable Long id,\n            @RequestBody ServerDto.AdminRequest req) {\n        return ResponseEntity.ok(serverService.updateAdmin(id, req));\n    }\n\n    // 서버 삭제\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> delete(@PathVariable Long id) {\n        serverService.delete(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    // 서버 떠나기\n    @PostMapping(\"/{id}/leave\")\n    public ResponseEntity<Void> leave(@PathVariable Long id) {\n        serverService.leave(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    @GetMapping\n    public ResponseEntity<List<ServerDto.Response>> list() {\n        return ResponseEntity.ok(serverService.list());\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<ServerDto.Response> detail(@PathVariable Long id) {\n        return ResponseEntity.ok(serverService.getDetail(id));\n    }\n}\n",
            "TimetableController.java": "// controller/TimetableController.java\npackage com.example.scheduler.controller;\n\nimport com.example.scheduler.dto.TimetableDto;\nimport com.example.scheduler.service.TimetableService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/servers/{serverId}/timetable\")\n@RequiredArgsConstructor\npublic class TimetableController {\n    private final TimetableService timetableService;\n\n    @PostMapping\n    public ResponseEntity<TimetableDto.EntryResponse> add(\n            @PathVariable Long serverId,\n            @RequestBody TimetableDto.EntryRequest req) {\n        req.setServerId(serverId);\n        return ResponseEntity.ok(timetableService.add(req));\n    }\n\n    @GetMapping\n    public ResponseEntity<List<TimetableDto.EntryResponse>> list(\n            @PathVariable Long serverId,\n            @RequestParam(required = false) String game,\n            @RequestParam(defaultValue = \"false\") boolean sortByGame) {\n        return ResponseEntity.ok(timetableService.list(serverId, game, sortByGame));\n    }\n\n    @GetMapping(\"/stats\")\n    public ResponseEntity<TimetableDto.StatsResponse> stats(@PathVariable Long serverId) {\n        return ResponseEntity.ok(timetableService.stats(serverId));\n    }\n}",
            "UserController.java": "package com.example.scheduler.controller;\n\nimport com.example.scheduler.domain.User;\nimport com.example.scheduler.dto.UserDto;\nimport com.example.scheduler.service.UserService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/api/users/me\")\n@RequiredArgsConstructor\npublic class UserController {\n    private final UserService userService;\n\n    @GetMapping\n    public ResponseEntity<UserDto.Profile> getProfile(Authentication auth) {\n        String username = auth.getName();\n        return ResponseEntity.ok(userService.getProfile(username));\n    }\n\n    @PutMapping(\"/nickname\")\n    public ResponseEntity<UserDto.Profile> updateNickname(\n            Authentication auth,\n            @RequestBody UserDto.UpdateNickname req\n    ) {\n        String username = auth.getName();\n        return ResponseEntity.ok(userService.updateNickname(username, req.getNickname()));\n    }\n}"
        }
    },
    "domain": {
        "__files__": {
            "AuditLog.java": "package com.example.scheduler.domain;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.time.LocalDateTime;\n\n@Entity\n@Table(name = \"audit_log\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class AuditLog {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private Long serverId;\n    private Long userId;\n    private String action;        // \"REGISTER\", \"JOIN\", \"LEAVE\" 등\n    @Column(name = \"occurred_at\", nullable = false)\n    private LocalDateTime occurredAt;\n    private String details;       // 추가 정보\n}\n",
            "BlacklistedToken.java": "package com.example.scheduler.domain;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.util.Date;\n\n@Entity\n@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder\n@Table(name = \"blacklisted_tokens\")\npublic class BlacklistedToken {\n\n    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, unique = true, length = 500)\n    private String token;          // 실제 JWT 문자열\n\n    @Column(nullable = false)\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date expiry;           // JWT 만료 시각\n}\n",
            "CustomGame.java": "package com.example.scheduler.domain;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Entity\n@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder\npublic class CustomGame {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id; //커스텀 게임 아이디\n\n    @Column(nullable = false)\n    private String name; //커스텀 게임 이름\n\n    @ManyToOne(optional = false)\n    @JoinColumn(name = \"server_id\")\n    private Server server; //어느 서버에 종속 되었는지\n}\n",
            "DefaultGame.java": "package com.example.scheduler.domain;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Entity\n@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder\npublic class DefaultGame {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id; //기본 게임 아이디\n\n    @Column(nullable = false, unique = true)\n    private String name; //기본 게임 이름\n}\n",
            "Server.java": "// domain/Server.java\npackage com.example.scheduler.domain;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.time.LocalTime;\nimport java.util.Set;\n\n@Entity\n@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder\npublic class Server {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;                      // 서버 ID\n\n    @Column(nullable = false)\n    private String name;                  // 서버 이름\n\n    @ManyToOne(optional = false)\n    @JoinColumn(name = \"owner_id\")\n    private User owner;                   // 서버장\n\n    @ManyToMany\n    @JoinTable(name = \"server_members\",\n            joinColumns = @JoinColumn(name = \"server_id\"),\n            inverseJoinColumns = @JoinColumn(name = \"user_id\"))\n    private Set<User> members;            // 서버 멤버\n\n    @Column(nullable = false, unique = true, length = 6)\n    private String inviteCode;\n\n    @ManyToMany\n    @JoinTable(name = \"server_admins\",\n            joinColumns = @JoinColumn(name = \"server_id\"),\n            inverseJoinColumns = @JoinColumn(name = \"user_id\"))\n    private Set<User> admins;\n\n    @OneToMany(mappedBy = \"server\", cascade = CascadeType.ALL, orphanRemoval = true)\n    private Set<TimetableEntry> entries;  // 타임테이블 엔트리\n\n    @Column(nullable = false)\n    private LocalTime resetTime;          // 타임테이블 초기화 시각\n}\n",
            "TimetableEntry.java": "package com.example.scheduler.domain;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport java.time.LocalDateTime;\n\n@Entity\n@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder\npublic class TimetableEntry {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id; //테이블 기록 아이디\n\n    @ManyToOne(optional = false)\n    @JoinColumn(name = \"server_id\")\n    private Server server; //테이블 기록할 서버 아이디\n\n    @ManyToOne(optional = false)\n    @JoinColumn(name = \"user_id\")\n    private User user; //테이블 기록할 유저 아이디\n\n    @Column(nullable = false)\n    private LocalDateTime slot; //어느 시간 슬롯에 넣을지\n\n    @ManyToOne\n    @JoinColumn(name = \"default_game_id\")\n    private DefaultGame defaultGame; //일반 게임인 경우\n\n    @ManyToOne\n    @JoinColumn(name = \"custom_game_id\")\n    private CustomGame customGame; //커스텀 게임인 경우\n}\n",
            "User.java": "// domain/User.java\npackage com.example.scheduler.domain;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport java.util.Set;\n\n@Entity\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class User {\n    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;                      // 유저 아이디\n\n    @Column(unique = true, nullable = false)\n    private String username;              // 유저 이름\n\n    @Column(nullable = true)\n    private String nickname;              // 표기될 이름\n\n    @Column(nullable = true)\n    private String password;              // 비밀번호\n\n    @Column(unique = true)\n    private String discordId;             // Discord 고유 ID\n\n    @Column(unique = true, nullable = true)\n    private String email;                 // ← 새로 추가된 이메일 필드\n\n    @ManyToMany(mappedBy = \"members\")\n    private Set<Server> joinedServers;    // 참여중인 서버\n}\n"
        }
    },
    "dto": {
        "__files__": {
            "AuthDto.java": "package com.example.scheduler.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\npublic class AuthDto {\n    @Data public static class SignupRequest { //회원가입 요청\n        private String username;\n        private String password;\n        private String nickname;\n    }\n    @Data @AllArgsConstructor public static class SignupResponse { //회원가입 성공여부\n        private String message;\n    }\n\n    @Data public static class LoginRequest  { //로그인 요청\n        private String username;\n        private String password;\n    }\n    @Data @AllArgsConstructor public static class LoginResponse  { //로그인 성공여부, 토큰\n        private String token;\n        private String message;\n        private Long userId;\n        private String nickname;\n\n    }\n}\n",
            "GameDto.java": "package com.example.scheduler.dto;\n\nimport lombok.*;\nimport java.util.List;\n\npublic class GameDto {\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class DefaultGameResponse {\n        private Long id;\n        private String name;\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class CustomGameRequest {\n        private String name;\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class CustomGameResponse {\n        private Long id;\n        private String name;\n    }\n\n    @Data\n    @AllArgsConstructor\n    public static class DefaultGameListResponse {\n        private List<DefaultGameResponse> defaultGames;\n    }\n\n    @Data\n    @AllArgsConstructor\n    public static class CustomGameListResponse {\n        private List<CustomGameResponse> customGames;\n    }\n\n    @Data\n    @AllArgsConstructor\n    public static class ScheduledUserResponse {\n        private String username;\n    }\n\n    @Data\n    @AllArgsConstructor\n    public static class ScheduledUserListResponse {\n        private List<ScheduledUserResponse> users;\n    }\n}\n",
            "ServerDto.java": "// dto/ServerDto.java\npackage com.example.scheduler.dto;\n\nimport lombok.*;\n\nimport java.time.LocalTime;\nimport java.util.List;\nimport java.util.Set;\n\npublic class ServerDto {\n\n    /* ---------- 요청용 DTO ---------- */\n\n    @Data\n    public static class CreateRequest {\n        private String name;\n        private LocalTime resetTime;\n    }\n\n    @Data\n    public static class UpdateResetTimeRequest {\n        private LocalTime resetTime;\n    }\n\n    @Data                // 서버 이름 변경\n    public static class UpdateNameRequest {\n        private String name;\n    }\n\n    @Data                // 멤버 강퇴\n    public static class KickRequest {\n        private Long userId;\n    }\n\n    @Data                // 관리자 임명/해제\n    public static class AdminRequest {\n        private Long userId;\n        private boolean grant;   // true: 임명, false: 해제\n    }\n\n    /* ---------- 응답용 DTO ---------- */\n\n    @Data @AllArgsConstructor\n    public static class Response {\n        private Long id;\n        private String name;\n        private Long ownerId;\n        private String owner;\n        private List<MemberInfo> members;\n        private List<MemberInfo> admins;\n        private LocalTime resetTime;\n        private String inviteCode;\n    }\n\n    @Data @AllArgsConstructor\n    public static class MemberInfo {\n        private Long id;\n        private String nickname;\n    }\n}\n",
            "TimetableDto.java": "package com.example.scheduler.dto;\n\nimport lombok.Data;\nimport lombok.AllArgsConstructor;\nimport java.time.LocalDateTime;\n\npublic class TimetableDto {\n    @Data\n    public static class EntryRequest {\n        private Long serverId;\n        private LocalDateTime slot;\n        private Long defaultGameId;\n        private Long customGameId;\n    }\n\n    @Data\n    public static class EntryResponse {\n        private Long id;\n        private String user;\n        private LocalDateTime slot;\n        private Long gameId;\n        private String gameName;\n        private boolean custom;\n    }\n\n    @Data\n    @AllArgsConstructor\n    public static class StatsResponse {\n        private String topGame;\n        private LocalDateTime avgSlot;\n        private LocalDateTime peakSlot;\n        private int peakCount;\n    }\n}\n",
            "UserDto.java": "package com.example.scheduler.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\npublic class UserDto {\n    @Data @AllArgsConstructor\n    public static class Profile {\n        private Long id;\n        private String username;\n        private String nickname;\n        private String email;\n    }\n\n    @Data\n    public static class UpdateNickname {\n        private String nickname;\n    }\n}"
        }
    },
    "repository": {
        "__files__": {
            "AuditLogRepository.java": "// repository/AuditLogRepository.java\npackage com.example.scheduler.repository;\n\nimport com.example.scheduler.domain.AuditLog;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface AuditLogRepository extends JpaRepository<AuditLog, Long> {\n}\n",
            "BlacklistedTokenRepository.java": "package com.example.scheduler.repository;\n\nimport com.example.scheduler.domain.BlacklistedToken;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.Date;\n\npublic interface BlacklistedTokenRepository extends JpaRepository<BlacklistedToken, Long> {\n    boolean existsByToken(String token);\n    void deleteAllByExpiryBefore(Date now);      // 만료된 블랙리스트 토큰 정리\n}\n",
            "CustomGameRepository.java": "package com.example.scheduler.repository;\n\nimport com.example.scheduler.domain.CustomGame;\nimport com.example.scheduler.domain.Server;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.List;\n\npublic interface CustomGameRepository extends JpaRepository<CustomGame, Long> {\n    List<CustomGame> findByServer(Server server);\n}\n",
            "DefaultGameRepository.java": "package com.example.scheduler.repository;\n\nimport com.example.scheduler.domain.DefaultGame;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.Optional;\n\npublic interface DefaultGameRepository extends JpaRepository<DefaultGame, Long> {\n    Optional<DefaultGame> findByName(String name);\n}\n",
            "ServerRepository.java": "package com.example.scheduler.repository;\n\nimport com.example.scheduler.domain.Server;\nimport com.example.scheduler.domain.User;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.time.LocalTime;\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface ServerRepository extends JpaRepository<Server, Long> {\n    List<Server> findByResetTime(LocalTime resetTime);\n    // 내가 속한 서버 목록 조회\n    List<Server> findByMembersContains(User user);\n\n    // 이름 검색 + 페이징\n    Page<Server> findByNameContainingIgnoreCase(String name, Pageable pageable);\n\n    Optional<Server> findByInviteCode(String inviteCode);\n}",
            "TimetableEntryRepository.java": "// repository/TimetableEntryRepository.java\npackage com.example.scheduler.repository;\n\nimport com.example.scheduler.domain.CustomGame;\nimport com.example.scheduler.domain.TimetableEntry;\nimport com.example.scheduler.domain.Server;\nimport com.example.scheduler.domain.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface TimetableEntryRepository extends JpaRepository<TimetableEntry, Long> {\n    List<TimetableEntry> findByServerOrderBySlot(Server server);\n    List<TimetableEntry> findByServerAndSlot(Server server, LocalDateTime slot);\n    Optional<TimetableEntry> findByServerAndUser(Server server, User user);\n    void deleteAllByServer(Server server);\n\n    // ↓ 추가 ↓\n    /** 특정 CustomGame을 예약한 모든 엔트리 */\n    List<TimetableEntry> findByCustomGame(CustomGame customGame);\n\n    /** 특정 CustomGame을 예약한 엔트리 전부 삭제 */\n    void deleteAllByCustomGame(CustomGame customGame);\n\n    void deleteAllByServerAndUser(Server server, User user);\n}\n",
            "UserRepository.java": "// repository/UserRepository.java\npackage com.example.scheduler.repository;\n\nimport com.example.scheduler.domain.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.Optional;\n\npublic interface UserRepository extends JpaRepository<User, Long> {\n    Optional<User> findByUsername(String username);\n    boolean existsByUsername(String username);\n\n    // OAuth용 Discord ID 조회 추가\n    Optional<User> findByDiscordId(String discordId);\n}"
        }
    },
    "scheduler": {
        "__files__": {
            "BlacklistCleanupScheduler.java": "package com.example.scheduler.scheduler;\n\nimport com.example.scheduler.repository.BlacklistedTokenRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\n\n@Component\n@RequiredArgsConstructor\npublic class BlacklistCleanupScheduler {\n\n    private final BlacklistedTokenRepository blacklistRepo;\n\n    /* 매일 새벽 3시 정각: 만료된 블랙리스트 토큰 제거 */\n    @Scheduled(cron = \"0 0 3 * * *\")\n    public void cleanup() {\n        blacklistRepo.deleteAllByExpiryBefore(new Date());\n    }\n}\n",
            "TimetableResetScheduler.java": "package com.example.scheduler.scheduler;\n\nimport com.example.scheduler.domain.Server;\nimport com.example.scheduler.repository.ServerRepository;\nimport com.example.scheduler.repository.TimetableEntryRepository;\nimport jakarta.transaction.Transactional;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n\nimport java.time.LocalTime;\nimport java.util.List;\n\n@Component\n@RequiredArgsConstructor\npublic class TimetableResetScheduler {\n    private final ServerRepository serverRepo;\n    private final TimetableEntryRepository entryRepo;\n\n    @Scheduled(cron = \"0 * * * * *\")\n    @Transactional\n    public void resetTimetables() {\n        LocalTime now = LocalTime.now().withSecond(0).withNano(0);\n        List<Server> servers = serverRepo.findByResetTime(now);\n        for (Server srv : servers) {\n            entryRepo.deleteAllByServer(srv);\n        }\n    }\n}"
        }
    },
    "security": {
        "__files__": {
            "JwtAuthenticationFilter.java": "// security/JwtAuthenticationFilter.java\npackage com.example.scheduler.security;\n\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport lombok.RequiredArgsConstructor;\n\nimport java.io.IOException;\n\n@RequiredArgsConstructor\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\n    private final JwtTokenProvider tokenProvider;\n    private final UserDetailsService userDetailsService;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                    HttpServletResponse response,\n                                    FilterChain chain)\n            throws IOException, ServletException {\n        String path = request.getServletPath();\n        // 인증이 필요 없는 엔드포인트 (/api/auth/**)는 필터링하지 않음\n        if (path.startsWith(\"/api/auth/**\")) {\n            chain.doFilter(request, response);\n            return;\n        }\n\n        String header = request.getHeader(\"Authorization\");\n        if (header != null && header.startsWith(\"Bearer \")) {\n            String token = header.substring(7);\n            if (tokenProvider.validateToken(token)) {\n                String username = tokenProvider.getUsername(token);\n                UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n                UsernamePasswordAuthenticationToken auth =\n                        new UsernamePasswordAuthenticationToken(\n                                userDetails,\n                                null,\n                                userDetails.getAuthorities()\n                        );\n                auth.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n                SecurityContextHolder.getContext().setAuthentication(auth);\n            }\n        }\n\n        chain.doFilter(request, response);\n    }\n}\n",
            "JwtTokenProvider.java": "package com.example.scheduler.security;\n\nimport com.example.scheduler.repository.BlacklistedTokenRepository;\nimport io.jsonwebtoken.*;\nimport io.jsonwebtoken.io.Decoders;\nimport io.jsonwebtoken.security.Keys;\nimport jakarta.annotation.PostConstruct;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport java.security.Key;\nimport java.util.Date;\n\n@Component\n@RequiredArgsConstructor\npublic class JwtTokenProvider {\n\n    @Value(\"${jwt.secret}\")\n    private String secretBase64;\n\n    @Value(\"${jwt.expiration-ms}\")\n    private long validityInMs;\n\n    private final BlacklistedTokenRepository blacklistRepo;\n\n    private Key key;\n\n    @PostConstruct\n    public void init() {\n        byte[] keyBytes = Decoders.BASE64.decode(secretBase64);\n        this.key = Keys.hmacShaKeyFor(keyBytes);\n    }\n\n    /* ---------- 발행 ---------- */\n    public String createToken(String username) {\n        Date now    = new Date();\n        Date expiry = new Date(now.getTime() + validityInMs);\n\n        return Jwts.builder()\n                .setSubject(username)\n                .setIssuedAt(now)\n                .setExpiration(expiry)\n                .signWith(key, SignatureAlgorithm.HS256)\n                .compact();\n    }\n\n    /* ---------- 파싱 유틸 ---------- */\n    public String getUsername(String token) {\n        return parser().parseClaimsJws(token).getBody().getSubject();\n    }\n\n    public Date getExpiry(String token) {\n        return parser().parseClaimsJws(token).getBody().getExpiration();\n    }\n\n    private JwtParser parser() {\n        return Jwts.parserBuilder().setSigningKey(key).build();\n    }\n\n    /* ---------- 검증 ---------- */\n    public boolean validateToken(String token) {\n        try {\n            parser().parseClaimsJws(token);            // 서명·만료 검사\n            return !blacklistRepo.existsByToken(token); // 블랙리스트 검사\n        } catch (JwtException | IllegalArgumentException e) {\n            return false;\n        }\n    }\n}\n",
            "OAuth2LoginSuccessHandler.java": "// security/OAuth2LoginSuccessHandler.java\npackage com.example.scheduler.security;\n\nimport com.example.scheduler.domain.User;\nimport com.example.scheduler.repository.UserRepository;\nimport com.example.scheduler.security.JwtTokenProvider;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.oauth2.core.user.OAuth2User;\nimport org.springframework.security.web.authentication.AuthenticationSuccessHandler;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\n\n@Component\npublic class OAuth2LoginSuccessHandler implements AuthenticationSuccessHandler {\n    private final JwtTokenProvider jwtProvider;\n    private final UserRepository    userRepo;\n    private final ObjectMapper      objectMapper = new ObjectMapper();\n\n    @Value(\"${app.frontend.base-url}\")\n    private String frontendBaseUrl;\n\n    @Value(\"${app.frontend.discord-callback-path}\")\n    private String discordCallbackPath;\n\n    public OAuth2LoginSuccessHandler(JwtTokenProvider jwtProvider,\n                                     UserRepository userRepo) {\n        this.jwtProvider = jwtProvider;\n        this.userRepo    = userRepo;\n    }\n\n    @Override\n    public void onAuthenticationSuccess(\n            HttpServletRequest  req,\n            HttpServletResponse res,\n            Authentication      auth) throws IOException {\n\n        OAuth2User oauthUser = (OAuth2User) auth.getPrincipal();\n        String discordId     = oauthUser.getAttribute(\"id\");\n\n        User user = userRepo.findByDiscordId(discordId)\n                .orElseThrow();\n\n        String token = jwtProvider.createToken(user.getUsername());\n\n        Map<String,Object> payload = Map.of(\n                \"id\",       user.getId(),\n                \"nickname\", user.getNickname()\n        );\n        String userJson    = objectMapper.writeValueAsString(payload);\n        String encodedUser = URLEncoder.encode(userJson, StandardCharsets.UTF_8);\n\n        // properties 로 뺀 값 사용\n        String redirectUrl = String.format(\n                \"%s%s?token=%s&user=%s\",\n                frontendBaseUrl,\n                discordCallbackPath,\n                token,\n                encodedUser\n        );\n        res.sendRedirect(redirectUrl);\n    }\n}\n",
            "SecurityConfig.java": "package com.example.scheduler.security;\n\nimport com.example.scheduler.repository.UserRepository;\nimport com.example.scheduler.service.DiscordOAuth2UserService;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport java.util.List;\n\n@Configuration\npublic class SecurityConfig {\n\n    @Value(\"${app.cors.allowed-origins}\")\n    private String allowedOrigins;\n\n    private final JwtTokenProvider tokenProvider;\n    private final org.springframework.security.core.userdetails.UserDetailsService userDetailsService;\n    private final DiscordOAuth2UserService oauth2UserService;\n    private final OAuth2LoginSuccessHandler oauth2SuccessHandler;\n\n    public SecurityConfig(JwtTokenProvider tokenProvider,\n                          org.springframework.security.core.userdetails.UserDetailsService userDetailsService,\n                          DiscordOAuth2UserService oauth2UserService,\n                          OAuth2LoginSuccessHandler oauth2SuccessHandler) {\n        this.tokenProvider = tokenProvider;\n        this.userDetailsService = userDetailsService;\n        this.oauth2UserService = oauth2UserService;\n        this.oauth2SuccessHandler = oauth2SuccessHandler;\n    }\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        // JWT 필터\n        JwtAuthenticationFilter jwtFilter =\n                new JwtAuthenticationFilter(tokenProvider, userDetailsService);\n\n        http\n                // CORS\n                .cors(Customizer.withDefaults())\n                // CSRF 비활성화\n                .csrf(AbstractHttpConfigurer::disable)\n                // 세션을 사용하지 않음\n                .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n                // URL 별 인가 설정\n                .authorizeHttpRequests(auth -> auth\n                        .requestMatchers(\n                                \"/api/auth/**\",\n                                \"/oauth2/**\",\n                                \"/login/oauth2/**\",\n                                \"/error\"\n                        ).permitAll()\n                        .anyRequest().authenticated()\n                )\n                // OAuth2 로그인 설정\n                .oauth2Login(oauth2 -> oauth2\n                        .loginPage(\"/auth/login\")\n                        // authorization 요청 엔드포인트\n                        .authorizationEndpoint(a -> a\n                                .baseUri(\"/oauth2/authorization\")\n                        )\n                        // 콜백 엔드포인트\n                        .redirectionEndpoint(r -> r\n                                .baseUri(\"/login/oauth2/code/*\")\n                        )\n                        // DiscordOAuth2UserService 주입\n                        .userInfoEndpoint(u -> u\n                                .userService(oauth2UserService)\n                        )\n                        // 성공 핸들러\n                        .successHandler(oauth2SuccessHandler)\n                )\n                // JWT 필터를 UsernamePasswordAuthenticationFilter 전에 등록\n                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n\n    // CORS 설정\n    @Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        CorsConfiguration cfg = new CorsConfiguration();\n        // 단일 origin, 혹은 콤마(,) 구분으로 여러 개\n        cfg.setAllowedOrigins(List.of(allowedOrigins.split(\",\")));\n        cfg.setAllowedMethods(List.of(\"GET\",\"POST\",\"PUT\",\"DELETE\",\"OPTIONS\"));\n        cfg.setAllowedHeaders(List.of(\"*\"));\n        cfg.setAllowCredentials(true);\n        cfg.setMaxAge(3600L);\n\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", cfg);\n        return source;\n    }\n\n    // 비밀번호 암호화\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    // AuthenticationManager 빈\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {\n        return authConfig.getAuthenticationManager();\n    }\n}\n"
        }
    },
    "service": {
        "__files__": {
            "AuditService.java": "// service/AuditService.java\npackage com.example.scheduler.service;\n\nimport com.example.scheduler.domain.AuditLog;\nimport com.example.scheduler.repository.AuditLogRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.time.LocalDateTime;\n\n@Service\n@RequiredArgsConstructor\npublic class AuditService {\n    private final AuditLogRepository auditLogRepo;\n\n\n    public void log(Long serverId, Long userId, String action, String details) {\n        AuditLog entry = AuditLog.builder()\n                .serverId(serverId)\n                .userId(userId)\n                .action(action)\n                .details(details)\n                .occurredAt(LocalDateTime.now())\n                .build();\n        auditLogRepo.save(entry);\n    }\n}\n",
            "AuthService.java": "package com.example.scheduler.service;\n\nimport com.example.scheduler.domain.BlacklistedToken;\nimport com.example.scheduler.domain.User;\nimport com.example.scheduler.dto.AuthDto;\nimport com.example.scheduler.repository.BlacklistedTokenRepository;\nimport com.example.scheduler.repository.UserRepository;\nimport com.example.scheduler.security.JwtTokenProvider;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport java.util.Date;\n\n@Service\n@RequiredArgsConstructor\npublic class AuthService {\n\n    private final UserRepository userRepo;\n    private final PasswordEncoder encoder;\n    private final AuthenticationManager authManager;\n    private final JwtTokenProvider jwtProvider;\n\n    private final BlacklistedTokenRepository blacklistRepo;\n\n    /* ---------- 회원가입 & 로그인 ---------- */\n\n    public void signup(AuthDto.SignupRequest req) {\n        if (userRepo.existsByUsername(req.getUsername())) {\n            throw new ResponseStatusException(\n                    HttpStatus.BAD_REQUEST, \"이미 사용 중인 아이디입니다\");\n        }\n        User user = User.builder()\n                .username(req.getUsername())\n                .nickname(req.getNickname())\n                .password(encoder.encode(req.getPassword()))\n                .build();\n        userRepo.save(user);\n    }\n\n    public String login(AuthDto.LoginRequest req) {\n        Authentication auth = authManager.authenticate(\n                new UsernamePasswordAuthenticationToken(req.getUsername(), req.getPassword()));\n        return jwtProvider.createToken(auth.getName());\n    }\n\n    /* ---------- 로그아웃 ---------- */\n    public void logout(String bearerHeader) {\n        if (bearerHeader == null || !bearerHeader.startsWith(\"Bearer \"))\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Authorization 헤더가 필요합니다\");\n\n        String token = bearerHeader.substring(7);\n\n        // 이미 무효 처리된 토큰인지 점검\n        if (!jwtProvider.validateToken(token))\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"유효하지 않은 토큰입니다\");\n\n        Date expiry = jwtProvider.getExpiry(token);\n\n        blacklistRepo.save(\n                BlacklistedToken.builder()\n                        .token(token)\n                        .expiry(expiry)\n                        .build());\n    }\n\n\n}\n",
            "CustomUserDetailsService.java": "package com.example.scheduler.service;\n\nimport com.example.scheduler.domain.User;\nimport com.example.scheduler.repository.UserRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport java.util.Collections;\nimport java.util.Optional;\n\n@Service\n@RequiredArgsConstructor\npublic class CustomUserDetailsService implements UserDetailsService {\n\n    private final UserRepository userRepository;\n\n    @Override\n    public UserDetails loadUserByUsername(String usernameOrDiscordId)\n            throws UsernameNotFoundException {\n        // 1) 우선 일반 username 으로 시도\n        Optional<User> opt = userRepository.findByUsername(usernameOrDiscordId);\n\n        // 2) 못 찾으면 discordId 로도 시도\n        User user = opt.orElseGet(() ->\n                userRepository.findByDiscordId(usernameOrDiscordId)\n                        .orElseThrow(() ->\n                                new UsernameNotFoundException(\"User not found: \" + usernameOrDiscordId)\n                        )\n        );\n\n        // Spring Security 용 UserDetails\n        return new org.springframework.security.core.userdetails.User(\n                user.getUsername(),                // 로그인 시 비밀번호 검증은 필요 없지만\n                user.getPassword() == null\n                        ? \"\" : user.getPassword(),     // null 방지\n                Collections.singletonList(\n                        new SimpleGrantedAuthority(\"ROLE_USER\")\n                )\n        );\n    }\n}",
            "DiscordOAuth2UserService.java": "// service/DiscordOAuth2UserService.java\npackage com.example.scheduler.service;\n\nimport com.example.scheduler.domain.User;\nimport com.example.scheduler.repository.UserRepository;\nimport org.springframework.security.core.authority.AuthorityUtils;\nimport org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;\nimport org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;\nimport org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException;\nimport org.springframework.security.oauth2.core.user.DefaultOAuth2User;\nimport org.springframework.security.oauth2.core.user.OAuth2User;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Map;\n\n@Service\npublic class DiscordOAuth2UserService\n        implements OAuth2UserService<OAuth2UserRequest, OAuth2User> {\n\n    private final UserRepository userRepo;\n\n    public DiscordOAuth2UserService(UserRepository userRepo) {\n        this.userRepo = userRepo;\n    }\n\n    @Override\n    public OAuth2User loadUser(OAuth2UserRequest req) throws OAuth2AuthenticationException {\n        DefaultOAuth2UserService delegate = new DefaultOAuth2UserService();\n        OAuth2User oauthUser = delegate.loadUser(req);\n\n        String discordId = oauthUser.getAttribute(\"id\");\n        String username  = oauthUser.getAttribute(\"username\");\n        String email     = oauthUser.getAttribute(\"email\");  // Discord 이메일\n\n        // DB에서 User 조회 또는 생성\n        User user = userRepo.findByDiscordId(discordId)\n                .orElseGet(() -> {\n                    User u = new User();\n                    u.setDiscordId(discordId);\n                    u.setUsername(username);\n                    u.setNickname(username);   // 최초 nickname 설정\n                    u.setEmail(email);         // 여기서 이메일 저장\n                    return userRepo.save(u);\n                });\n\n        // 기존 유저의 이메일이 없거나 바뀌었으면 업데이트\n        if (email != null && !email.equals(user.getEmail())) {\n            user.setEmail(email);\n            userRepo.save(user);\n        }\n\n        // 권한 세팅 및 id, username, nickname, email을 OAuth2User attribute에 포함\n        return new DefaultOAuth2User(\n                AuthorityUtils.createAuthorityList(\"ROLE_USER\"),\n                Map.of(\n                        \"id\",       discordId,\n                        \"username\", username,\n                        \"nickname\", user.getNickname(),\n                        \"email\",    user.getEmail()\n                ),\n                \"id\"\n        );\n    }\n}\n",
            "GameService.java": "// service/GameService.java\npackage com.example.scheduler.service;\n\nimport com.example.scheduler.domain.CustomGame;\nimport com.example.scheduler.domain.DefaultGame;\nimport com.example.scheduler.domain.Server;\nimport com.example.scheduler.domain.User;\nimport com.example.scheduler.dto.GameDto;\nimport com.example.scheduler.repository.*;\nimport jakarta.transaction.Transactional;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\n@RequiredArgsConstructor\npublic class GameService {\n\n    private final DefaultGameRepository defaultGameRepo;\n    private final CustomGameRepository customGameRepo;\n    private final ServerRepository serverRepo;\n    private final UserRepository userRepo;\n    private final TimetableEntryRepository entryRepo;\n\n    /* ---------- 기본 / 커스텀 게임 조회 ---------- */\n\n    public List<GameDto.DefaultGameResponse> listAllDefault() {\n        return defaultGameRepo.findAll().stream()\n                .map(dg -> new GameDto.DefaultGameResponse(dg.getId(), dg.getName()))\n                .collect(Collectors.toList());\n    }\n\n    public List<GameDto.CustomGameResponse> listCustomByServer(Long serverId) {\n        Server srv = serverRepo.findById(serverId)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"서버를 찾을 수 없습니다\"));\n        return customGameRepo.findByServer(srv).stream()\n                .map(cg -> new GameDto.CustomGameResponse(cg.getId(), cg.getName()))\n                .collect(Collectors.toList());\n    }\n\n    /* ---------- 커스텀 게임 추가 / 삭제 ---------- */\n\n    public GameDto.CustomGameResponse addCustomGame(Long serverId, GameDto.CustomGameRequest req) {\n        Server srv = serverRepo.findById(serverId)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"서버를 찾을 수 없습니다\"));\n\n        CustomGame cg = CustomGame.builder()\n                .name(req.getName())\n                .server(srv)\n                .build();\n\n        cg = customGameRepo.save(cg);\n        return new GameDto.CustomGameResponse(cg.getId(), cg.getName());\n    }\n\n    /**\n     * 1) 커스텀 게임을 예약해 놓은 유저 목록 조회\n     */\n    public GameDto.ScheduledUserListResponse listScheduledUsers(Long serverId, Long gameId) {\n        Server srv = serverRepo.findById(serverId)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"서버를 찾을 수 없습니다\"));\n        CustomGame cg = customGameRepo.findById(gameId)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"게임을 찾을 수 없습니다\"));\n\n        if (!cg.getServer().getId().equals(serverId)) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"해당 서버의 게임이 아닙니다\");\n        }\n\n        List<GameDto.ScheduledUserResponse> users = entryRepo.findByCustomGame(cg).stream()\n                .map(e -> e.getUser().getUsername())\n                .distinct()\n                .map(GameDto.ScheduledUserResponse::new)\n                .collect(Collectors.toList());\n\n        return new GameDto.ScheduledUserListResponse(users);\n    }\n\n    /**\n     * 2) 커스텀 게임 삭제 (엔트리 먼저 삭제 → 게임 삭제)\n     */\n    @Transactional\n    public void deleteCustomGame(Long serverId, Long gameId) {\n        Server srv = serverRepo.findById(serverId)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"서버를 찾을 수 없습니다\"));\n        CustomGame cg = customGameRepo.findById(gameId)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"게임을 찾을 수 없습니다\"));\n\n        // 권한 검사 (owner 또는 admin)\n        String current = SecurityContextHolder.getContext().getAuthentication().getName();\n        if (!(srv.getOwner().getUsername().equals(current) || srv.getAdmins().stream()\n                .anyMatch(u -> u.getUsername().equals(current)))) {\n            throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"관리자 권한이 필요합니다\");\n        }\n\n        // ① 해당 게임을 예약한 모든 타임테이블 엔트리 삭제\n        entryRepo.deleteAllByCustomGame(cg);\n\n        // ② 커스텀 게임 자체 삭제\n        customGameRepo.delete(cg);\n    }\n}\n",
            "ServerService.java": "package com.example.scheduler.service;\n\nimport com.example.scheduler.domain.CustomGame;\nimport com.example.scheduler.domain.Server;\nimport com.example.scheduler.domain.User;\nimport com.example.scheduler.dto.ServerDto;\nimport com.example.scheduler.repository.CustomGameRepository;\nimport com.example.scheduler.repository.ServerRepository;\nimport com.example.scheduler.repository.TimetableEntryRepository;\nimport com.example.scheduler.repository.UserRepository;\nimport jakarta.transaction.Transactional;\nimport lombok.RequiredArgsConstructor;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n@Service\n@RequiredArgsConstructor\npublic class ServerService {\n\n    private final ServerRepository serverRepo;\n    private final UserRepository userRepo;\n    private final TimetableEntryRepository entryRepo;\n    private final CustomGameRepository customGameRepo;\n    private final AuditService auditService;\n    private final boolean AuditEnable=true; //감사로그 온오프\n\n    /* ---------- 생성 / 참가 ---------- */\n\n    public List<ServerDto.Response> listMine() {\n        User me = currentUser();\n        return serverRepo.findByMembersContains(me).stream()\n                .map(this::toDto)\n                .collect(Collectors.toList());\n    }\n\n    public List<ServerDto.Response> search(String q, int page, int size) {\n        Page<Server> pg = serverRepo.findByNameContainingIgnoreCase(\n                q == null ? \"\" : q,\n                PageRequest.of(page, size)\n        );\n        return pg.getContent().stream()\n                .map(this::toDto)\n                .collect(Collectors.toList());\n    }\n\n    public ServerDto.Response create(ServerDto.CreateRequest req) {\n        User owner = currentUser();\n        String code = RandomStringUtils.randomAlphanumeric(6).toUpperCase();\n\n        Server srv = Server.builder()\n                .name(req.getName())\n                .owner(owner)\n                .members(Set.of(owner))\n                .admins(Set.of(owner))\n                .resetTime(req.getResetTime())\n                .inviteCode(code)\n                .build();\n\n        if(AuditEnable){\n            auditService.log(srv.getId(), owner.getId(), \"CREATE_SERVER\", \"name=\" + req.getName());\n        }\n        serverRepo.save(srv);\n        return toDto(srv);\n    }\n\n    public ServerDto.Response join(Long serverId) {\n        User user = currentUser();\n        Server srv = fetch(serverId);\n\n        if (srv.getMembers().contains(user)) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"이미 참가한 서버입니다\");\n        }\n        srv.getMembers().add(user);\n        serverRepo.save(srv);\n        return toDto(srv);\n    }\n\n    public ServerDto.Response joinByCode(String code) {\n        Server srv = serverRepo.findByInviteCode(code)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Invalid code\"));\n        User user = currentUser();\n        if (srv.getMembers().contains(user))\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"이미 참가한 서버입니다\");\n        srv.getMembers().add(user);\n        serverRepo.save(srv);\n        if(AuditEnable){\n            auditService.log(srv.getId(), user.getId(), \"JOIN_SERVER\", null);\n        }\n        return toDto(srv);\n    }\n\n    /* ---------- 일반 수정 ---------- */\n\n    public ServerDto.Response updateResetTime(Long id, ServerDto.UpdateResetTimeRequest req) {\n        Server srv = fetch(id);\n        assertAdmin(srv, currentUser());\n\n        srv.setResetTime(req.getResetTime());\n        serverRepo.save(srv);\n        return toDto(srv);\n    }\n\n    public ServerDto.Response rename(Long id, ServerDto.UpdateNameRequest req) {\n        Server srv = fetch(id);\n        assertAdmin(srv, currentUser());\n\n        srv.setName(req.getName());\n        serverRepo.save(srv);\n        return toDto(srv);\n    }\n\n    /* ---------- 관리자 기능 ---------- */\n\n    public ServerDto.Response kick(Long id, ServerDto.KickRequest req) {\n        Server srv = fetch(id);\n        User me = currentUser();\n        assertAdmin(srv, me);\n\n        User target = userRepo.findById(req.getUserId())\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));\n\n        if (srv.getOwner().equals(target))\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"서버장은 강퇴할 수 없습니다\");\n\n        srv.getMembers().remove(target);\n        srv.getAdmins().remove(target);\n        serverRepo.save(srv);\n        if(AuditEnable){\n            auditService.log(srv.getId(), me.getId(), \"KICK_MEMBER\", \"targetUserId=\" + req.getUserId());\n        }\n\n        return toDto(srv);\n    }\n\n    public ServerDto.Response updateAdmin(Long id, ServerDto.AdminRequest req) {\n        Server srv = fetch(id);\n        User me = currentUser();\n        assertAdmin(srv, me);\n\n        User target = userRepo.findById(req.getUserId())\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));\n\n        if (!srv.getMembers().contains(target))\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"서버 멤버가 아닙니다\");\n\n        if (req.isGrant()) {\n            srv.getAdmins().add(target);\n        } else {\n            if (srv.getOwner().equals(target))\n                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"서버장은 항상 관리자입니다\");\n            srv.getAdmins().remove(target);\n        }\n        if(AuditEnable){\n            String detail = (req.isGrant() ? \"GRANT_ADMIN:\" : \"REVOKE_ADMIN:\") + req.getUserId();\n            auditService.log(srv.getId(), me.getId(), \"CHANGE_ADMIN\", detail);\n        }\n\n        serverRepo.save(srv);\n        return toDto(srv);\n    }\n\n    /* ---------- 삭제 & 떠나기 ---------- */\n\n    @Transactional\n    public void delete(Long id) {\n        Server srv = fetch(id);\n        User me = currentUser();\n        if (!srv.getOwner().equals(me)) {\n            throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"서버장만 삭제할 수 있습니다\");\n        }\n        // 1) 타임테이블 엔트리 삭제\n        entryRepo.deleteAllByServer(srv);\n        // 2) 커스텀 게임 및 관련 엔트리 삭제\n        List<CustomGame> customs = customGameRepo.findByServer(srv);\n        for (CustomGame cg : customs) {\n            entryRepo.deleteAllByCustomGame(cg);\n            customGameRepo.delete(cg);\n        }\n        // 3) 서버 삭제\n        serverRepo.delete(srv);\n    }\n\n    @Transactional\n    public void leave(Long id) {\n        Server srv = fetch(id);\n        User me = currentUser();\n        if (srv.getOwner().equals(me)) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"서버장은 떠날 수 없습니다\");\n        }\n        entryRepo.deleteAllByServerAndUser(srv, me);\n        srv.getMembers().remove(me);\n        srv.getAdmins().remove(me);\n        serverRepo.save(srv);\n        if(AuditEnable){\n            auditService.log(srv.getId(), me.getId(), \"LEAVE_SERVER\", null);\n        }\n    }\n\n    /* ---------- 조회 ---------- */\n\n    public List<ServerDto.Response> list() {\n        return serverRepo.findAll().stream()\n                .map(this::toDto)\n                .collect(Collectors.toList());\n    }\n\n    public ServerDto.Response getDetail(Long id) {\n        Server srv = fetch(id);\n        User me = currentUser();\n        if (!srv.getMembers().contains(me))\n            throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"서버 멤버가 아닙니다\");\n\n        return toDto(srv);\n    }\n\n    /* ---------- 내부 헬퍼 ---------- */\n\n    private User currentUser() {\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\n        return userRepo.findByUsername(username).orElseThrow();\n    }\n\n    private Server fetch(Long id) {\n        return serverRepo.findById(id)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"서버를 찾을 수 없습니다\"));\n    }\n\n    private void assertAdmin(Server srv, User user) {\n        if (!(srv.getOwner().equals(user) || srv.getAdmins().contains(user))) {\n            throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"관리자 권한이 필요합니다\");\n        }\n    }\n\n    private ServerDto.Response toDto(Server s) {\n        List<ServerDto.MemberInfo> mems = s.getMembers().stream()\n                .map(u -> new ServerDto.MemberInfo(u.getId(), u.getNickname()))\n                .collect(Collectors.toList());\n        List<ServerDto.MemberInfo> adms = s.getAdmins().stream()\n                .map(u -> new ServerDto.MemberInfo(u.getId(), u.getNickname()))\n                .collect(Collectors.toList());\n        return new ServerDto.Response(\n                s.getId(),\n                s.getName(),\n                s.getOwner().getId(),\n                s.getOwner().getNickname(),\n                mems,\n                adms,\n                s.getResetTime(),\n                s.getInviteCode()\n        );\n    }\n}\n",
            "TimetableService.java": "package com.example.scheduler.service;\n\nimport com.example.scheduler.domain.*;\nimport com.example.scheduler.dto.TimetableDto;\nimport com.example.scheduler.repository.*;\nimport jakarta.transaction.Transactional;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport java.time.LocalDateTime;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Service\n@RequiredArgsConstructor\npublic class TimetableService {\n    private final TimetableEntryRepository entryRepo;\n    private final ServerRepository serverRepo;\n    private final UserRepository userRepo;\n    private final DefaultGameRepository defaultGameRepo;\n    private final CustomGameRepository customGameRepo;\n\n    @Transactional\n    public TimetableDto.EntryResponse add(TimetableDto.EntryRequest req) {\n        User user = userRepo.findByUsername(\n                SecurityContextHolder.getContext().getAuthentication().getName()\n        ).orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));\n        Server srv = serverRepo.findById(req.getServerId())\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));\n\n        entryRepo.findByServerAndUser(srv, user)\n                .ifPresent(entryRepo::delete);\n\n        TimetableEntry e = TimetableEntry.builder()\n                .server(srv)\n                .user(user)\n                .slot(req.getSlot().truncatedTo(ChronoUnit.MINUTES))\n                .build();\n\n        if (req.getCustomGameId() != null) {\n            CustomGame cg = customGameRepo.findById(req.getCustomGameId())\n                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Invalid customGameId\"));\n            e.setCustomGame(cg);\n        } else if (req.getDefaultGameId() != null) {\n            DefaultGame dg = defaultGameRepo.findById(req.getDefaultGameId())\n                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Invalid defaultGameId\"));\n            e.setDefaultGame(dg);\n        } else {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Game ID is required\");\n        }\n\n        entryRepo.save(e);\n        return toResp(e);\n    }\n\n    public List<TimetableDto.EntryResponse> list(\n            Long serverId, String gameName, boolean sortByGame\n    ) {\n        Server srv = serverRepo.findById(serverId)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));\n\n        // 1) 서버 전체 엔트리 조회\n        List<TimetableEntry> list = entryRepo.findByServerOrderBySlot(srv);\n\n        // 2) 이름 기준 필터링 (gameName 파라미터 존재 시)\n        if (gameName != null) {\n            list = list.stream()\n                    .filter(e -> {\n                        String name = (e.getCustomGame() != null)\n                                ? e.getCustomGame().getName()\n                                : e.getDefaultGame().getName();\n                        return name.equals(gameName);\n                    })\n                    .collect(Collectors.toList());\n        }\n\n        // 3) 게임명 기준 정렬\n        if (sortByGame) {\n            list.sort(Comparator.comparing(e -> {\n                return (e.getCustomGame() != null)\n                        ? e.getCustomGame().getName()\n                        : e.getDefaultGame().getName();\n            }));\n        }\n\n        return list.stream().map(this::toResp).collect(Collectors.toList());\n    }\n\n    public TimetableDto.StatsResponse stats(Long serverId) {\n        Server srv = serverRepo.findById(serverId)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));\n        List<TimetableEntry> list = entryRepo.findByServerOrderBySlot(srv);\n\n        // 최다 플레이 게임\n        String topGame = list.stream()\n                .collect(Collectors.groupingBy(e -> {\n                    return (e.getCustomGame() != null)\n                            ? e.getCustomGame().getName()\n                            : e.getDefaultGame().getName();\n                }, Collectors.counting()))\n                .entrySet().stream()\n                .max(Map.Entry.comparingByValue())\n                .get().getKey();\n\n        // 슬롯별 카운트\n        Map<LocalDateTime, Long> slotCounts = list.stream()\n                .collect(Collectors.groupingBy(TimetableEntry::getSlot, Collectors.counting()));\n\n        // 피크 슬롯과 평균 슬롯\n        LocalDateTime peakSlot = slotCounts.entrySet().stream()\n                .max(Map.Entry.comparingByValue())\n                .get().getKey();\n\n        double avgMinute = list.stream()\n                .mapToLong(e -> e.getSlot().getHour() * 60 + e.getSlot().getMinute())\n                .average().orElse(0);\n\n        LocalDateTime avgSlot = LocalDateTime.now()\n                .withHour((int)avgMinute / 60)\n                .withMinute((int)avgMinute % 60)\n                .truncatedTo(ChronoUnit.MINUTES);\n\n        int peakCount = slotCounts.get(peakSlot).intValue();\n        return new TimetableDto.StatsResponse(topGame, avgSlot, peakSlot, peakCount);\n    }\n\n    private TimetableDto.EntryResponse toResp(TimetableEntry e) {\n        TimetableDto.EntryResponse r = new TimetableDto.EntryResponse();\n        r.setId(e.getId());\n        r.setUser(e.getUser().getNickname());\n        r.setSlot(e.getSlot());\n        if (e.getCustomGame() != null) {\n            r.setGameId(e.getCustomGame().getId());\n            r.setGameName(e.getCustomGame().getName());\n            r.setCustom(true);\n        } else {\n            r.setGameId(e.getDefaultGame().getId());\n            r.setGameName(e.getDefaultGame().getName());\n            r.setCustom(false);\n        }\n        return r;\n    }\n}\n",
            "UserService.java": "package com.example.scheduler.service;\n\nimport com.example.scheduler.domain.User;\nimport com.example.scheduler.dto.UserDto;\nimport com.example.scheduler.repository.UserRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\nimport org.springframework.http.HttpStatus;\n\n@Service\n@RequiredArgsConstructor\npublic class UserService {\n    private final UserRepository userRepository;\n\n    public UserDto.Profile getProfile(String username) {\n        User user = userRepository.findByUsername(username)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));\n        return new UserDto.Profile(user.getId(), user.getUsername(), user.getNickname(), user.getEmail());\n    }\n\n    public UserDto.Profile updateNickname(String username, String newNickname) {\n        User user = userRepository.findByUsername(username)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));\n        user.setNickname(newNickname);\n        userRepository.save(user);\n        return new UserDto.Profile(user.getId(), user.getUsername(), user.getNickname(), user.getEmail());\n    }\n}"
        }
    }
}